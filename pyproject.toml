[build-system]
requires = ["setuptools>=68", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "celeste-api"
version = "0.1.0"
description = "HTTP API for the Celeste UI (capabilities, models, and operations)."
readme = "README.md"
requires-python = ">=3.13"
authors = [{ name = "Celeste Maintainers" }]
dependencies = [
  "fastapi>=0.111.0",
  "uvicorn[standard]>=0.30.0",
  "pydantic>=2.8.0",
  "python-multipart>=0.0.9",
  "sse-starlette>=1.6.1",
  "httpx>=0.27.0",
  # Celeste modules used by the API
  "celeste-client>=0.1.0",
  "celeste-core>=0.1.0",
  "celeste-image-generation>=0.1.0",
  "celeste-image-edit>=0.1.0",
  "celeste-video-generation>=0.1.0",
  "celeste-reranking>=0.1.0",
  "celeste-document-intelligence>=0.1.0",
  "cachetools>=5.5.2",
]

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]

[tool.uv.sources]
celeste-client = { git = "https://github.com/celeste-kai/celeste-client.git" }
celeste-core = { git = "https://github.com/celeste-kai/celeste-core.git" }
celeste-image-generation = { git = "https://github.com/celeste-kai/celeste-image-generation.git" }
celeste-image-edit = { git = "https://github.com/celeste-kai/celeste-image-edit.git" }
celeste-video-generation = { git = "https://github.com/celeste-kai/celeste-video-generation.git" }
celeste-reranking = { git = "https://github.com/celeste-kai/celeste-reranking.git" }
celeste-document-intelligence = { git = "https://github.com/celeste-kai/celeste-document-intelligence.git" }

[tool.ruff]
line-length = 120
target-version = "py313"
exclude = ["Notebooks/*"]

[tool.ruff.lint]
select = [
    "F",      # Pyflakes (includes F401 unused imports, F841 unused variables)
    "E",      # Pycodestyle errors
    "W",      # Pycodestyle warnings (includes W505 doc-line-too-long)
    "C90",    # McCabe complexity
    "I",      # isort
    "N",      # pep8-naming
    "B",      # flake8-bugbear
    "SIM",    # flake8-simplify (includes SIM105, SIM108)
    "UP",     # pyupgrade
    "ANN",    # flake8-annotations (type hints)
    "ARG",    # flake8-unused-arguments
    "A",      # flake8-builtins (shadowed names)
    "SLF",    # flake8-self (protected members)
    "PLW",    # Pylint warnings
    "PLC",    # Pylint conventions
    "PLE",    # Pylint errors
    "PLR",    # Pylint refactor
]
ignore = [
    "E501",   # Line too long (handled by formatter)
    "ANN101", # Missing type annotation for self
    "ANN102", # Missing type annotation for cls
    "ANN401", # Dynamically typed expressions (Any)
    "PLR0913", # Too many arguments in function definition
    "PLR2004", # Magic value used in comparison
]

# Configure docstring/comment length
[tool.ruff.lint.pycodestyle]
max-doc-length = 100

# Configure import sorting
[tool.ruff.lint.isort]
known-first-party = ["src", "metadata_extraction", "text_to_speech", "core", "api"]

# Configure code complexity
[tool.ruff.lint.mccabe]
max-complexity = 10

# Configure formatter
[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_any_unimported = false
no_implicit_optional = true
check_untyped_defs = true
warn_no_return = true
warn_unused_ignores = true
show_error_codes = true
ignore_missing_imports = true

[dependency-groups]
dev = [
    "detect-secrets>=1.5.0",
    "mypy>=1.17.1",
    "nbstripout>=0.8.1",
]
